import * from "./builtin.ee";



///The option type safely wraps around a object that could be null, forcing safe unwrapping before being able to use the inner value
export enum Option<T> {
    Some(T),
    None
}


export implement Option<T> { 


    function unwrap_or<T>(self:Option<T>,or:T):T{
        match(self){
            Option.Some(value)=>{
                return value;
            },
            Option.None => {
                return or;
            }
        }
    }


    function unwrap<T>(self:Option<T>):T{
        match(self) {
            Option.Some(value) => {
                return value
            },
            Option.None => {
                panic("unwrapped a value of type None, expected Some")
            }
        }
    }


    function expect<T>(self:Option<T>,msg:string):T{
        match(self) {
            Option.Some(value) => {
                return value
            },
            Option.None => {
                panic(msg)
            }
        }
    }


}